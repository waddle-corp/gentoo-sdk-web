/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["gentoo-logger"] = factory();
	else
		root["gentoo-logger"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/apis/chatConfig.js":
/*!********************************!*\
  !*** ./src/apis/chatConfig.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchChatUserId: () => (/* binding */ fetchChatUserId),\n/* harmony export */   fetchChatbotData: () => (/* binding */ fetchChatbotData),\n/* harmony export */   fetchFloatingData: () => (/* binding */ fetchFloatingData),\n/* harmony export */   fetchPartnerId: () => (/* binding */ fetchPartnerId),\n/* harmony export */   sendChatEventLog: () => (/* binding */ sendChatEventLog),\n/* harmony export */   sendEventLog: () => (/* binding */ sendEventLog)\n/* harmony export */ });\n// logger apis\nasync function fetchChatUserId(userToken, udid = \"\", partnerId, chatUserId) {\n    const convertedUserToken = (userToken && userToken !== 'null') ? String(userToken) : Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    const params = {\n        externalKey: String(partnerId),\n        userToken: convertedUserToken,\n        udid: String(udid),\n        chatUserId: chatUserId ? String(chatUserId) : null\n    }\n\n    try {\n        const url = `${\"https://dev-api.gentooai.com/chat\"}${\"/api/v1/user\"}`;\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(params)\n        });\n\n        const res = await response.json();\n        return res.chatUserId;\n    } catch (error) {\n        console.error(`Error while calling fetchChatUserId API: ${error}`)\n    }\n}\n\nasync function sendEventLog(event, basicPayload = {}, customPayload = {}) {\n    // if (!customPayload.referrerOrigin) return;\n    \n    const payload = {\n        event,\n        timestamp: Date.now(),\n        ...basicPayload,\n        ...customPayload,\n    }\n\n    const url = `${\"https://dev-tracking.gentooai.com\"}${\"/api/v1/beacon/track\"}`;\n    navigator.sendBeacon(\n        url,\n        JSON.stringify(payload)\n    );\n}\n\n// floating button apis\nasync function fetchChatbotData(partnerId, chatUserId) {\n    try {\n        const response = await fetch(`${\"https://dev-api.gentooai.com/chat\"}${\"/api/v1/chat/chatbot\"}/${partnerId}?chatUserId=${chatUserId}`, {\n            method: \"GET\",\n            headers: {},\n        });\n        const res = await response.json();\n        return res;\n    } catch (error) {\n        console.error(`Error while calling fetchChatbotId API: ${error}`);\n    }\n}\n\nasync function fetchFloatingData(partnerId, displayLocation, itemId, chatUserId) {\n    try {\n        const response = await fetch(\n            `${\"https://dev-api.gentooai.com/chat\"}${\"/api/v1/chat/floating\"}/${partnerId}?displayLocation=${displayLocation}&itemId=${itemId}&chatUserId=${chatUserId}`,\n            {\n                method: \"GET\",\n                headers: {},\n            }\n        );\n\n        const res = await response.json();\n        return res;\n    } catch (error) {\n        console.error(`Error while calling fetchFloatingData API: ${error}`);\n    }\n}\n\nasync function fetchPartnerId(mallId) {\n    try {\n        const url = `${\"https://dev-api.gentooai.com/app\"}${\"/api/partner/v1/cafe24/mall\"}/${mallId}`;\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {}\n        });\n        const res = await response.json();\n        return res.partnerId;\n    } catch (error) {\n        console.error(`Error while calling fetchPartnerId API: ${error}`)\n    }\n}\n\nasync function sendChatEventLog(payload, isMobileDevice) {\n    try {\n        const params = {\n            eventCategory: String(payload.eventCategory),\n            chatUserId: String(payload.chatUserId),\n            partnerId: String(payload.partnerId),\n            channelId: isMobileDevice ? \"mobile\" : \"web\",\n            products: payload?.products,\n        };\n\n        const response = await fetch(`${\"https://dev-api.gentooai.com/chat\"}${\"/api/v1/event/userEvent\"}/${payload.partnerId}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(params),\n        });\n\n        const res = await response.json(); // JSON 형태의 응답 데이터 파싱\n        return res;\n    } catch (error) {\n        console.error(`Error while calling logEvent API: ${error}`);\n    }\n}\n\n//# sourceURL=webpack://gentoo-logger/./src/apis/chatConfig.js?");

/***/ }),

/***/ "./src/logger.js":
/*!***********************!*\
  !*** ./src/logger.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apis/chatConfig */ \"./src/apis/chatConfig.js\");\n\n\nclass Logger {\n    constructor(props) {\n        // Check for existing SDK elements \n        if (window.__GentooLoggerInited !== null && window.__GentooLoggerInited !== undefined) {\n            console.warn(\"GentooLogger already exists in the document, skipping initialization.\");\n            return;\n        }\n\n        this.partnerType = props.partnerType || 'gentoo';\n        this.gentooSessionData = JSON.parse(sessionStorage.getItem('gentoo')) || {};\n        this.chatUserId = this.gentooSessionData?.cuid || null;\n        this.displayLocation;\n        this.isMobileDevice = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n        this.isInitialized = false;  // Add flag to track initialization\n        this.itemId = this.getProductNo();\n        this.searchKeyword = this.getSearchKeyword();\n        this.cafe24UserId = null;\n        this.cafe24MemberId = null;\n        this.cafe24GuestId = null;\n        this.sessionId = this.gentooSessionData?.sessionId || `sess-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n        if (!this.gentooSessionData?.sessionId) {\n            this.gentooSessionData.sessionId = this.sessionId;\n            sessionStorage.setItem('gentoo', JSON.stringify(this.gentooSessionData));\n        }\n\n        /* // cafe24 Gentoo-dev App\n        this.cafe24ClientId = 'ckUs4MK3KhZixizocrCmTA';\n        this.cafe24Version = '2024-09-01'; */\n        // cafe24 Gentoo-prod App\n        this.cafe24ClientId = 'QfNlFJBPD6mXVWkE8MybWD';\n        this.cafe24Version = '2024-09-01';\n\n        // CAFE24API initialization to ensure promises are handled correctly\n        this.bootPromise = new Promise((resolve, reject) => {\n            // cafe24 API init & fetch partnerId, chatUserId\n            ((CAFE24API) => {\n                this.cafe24API = CAFE24API;\n\n                const getCustomerIDInfoPromise = () => {\n                    return new Promise((innerResolve, innerReject) => {\n                        CAFE24API.getCustomerIDInfo((err, res) => {\n                            if (err) {\n                                console.error(`Error while calling cafe24 getCustomerIDInfo api: ${err}`);\n                                innerReject(err);\n                            } else {\n                                innerResolve(res);\n                            }\n                        });\n                    });\n                };\n\n                // Fetch partner ID first\n                this.fetchPartnerId(CAFE24API.MALL_ID)\n                    .then(partnerId => {\n                        this.partnerId = partnerId;\n\n                        // Then get customer ID\n                        return getCustomerIDInfoPromise();\n                    })\n                    .then(res => {\n                        if (res.id.member_id) {\n                            this.cafe24UserId = res.id.member_id;\n                            this.cafe24MemberId = res.id.member_id;\n                        } else {\n                            this.cafe24UserId = res.id['guest_id'];\n                            this.cafe24GuestId = res.id['guest_id'];\n                        }\n\n                        // 1. chatUserId 먼저 받아오기 (for floating/chatbot AB test)\n                        return (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.fetchChatUserId)(this.cafe24UserId, \"\", this.partnerId, this.chatUserId)\n                    })\n                    .then(chatUserId => {\n                        this.chatUserId = chatUserId;\n                        this.gentooSessionData.cuid = chatUserId;\n                        sessionStorage.setItem('gentoo', JSON.stringify(this.gentooSessionData));\n                        \n                        // declare basic payload\n                        this.basicPayload = {\n                            sessionId: this.sessionId,\n                            externalKey: this.partnerId,\n                            chatUserId: this.chatUserId,\n                            userId: this.cafe24MemberId,\n                            anonymousId: this.cafe24GuestId,\n                            displayLocation: this.displayLocation,\n                            pageLocation: window.location.href,\n                            itemId: this.itemId,\n                        }\n\n                        // send event log\n                        const ref = document.referrer;\n                        if (ref && !ref.includes(window.location.host)) {\n                            (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.sendEventLog)(\"PageTransition\", this.basicPayload, { referrerOrigin: ref });\n                        } else if (this.searchKeyword) {\n                            (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.sendEventLog)(\"PageTransition\", this.basicPayload, { searchKeyword: this.searchKeyword });\n                        } else {\n                            (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.sendEventLog)(\"PageTransition\", this.basicPayload); \n                        }\n\n                        window.GentooLogListener = {\n                            log: (payload) => {\n                                if (payload.event === 'floatingButtonClick') {\n                                    (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.sendEventLog)(\"FloatingButtonClick\", this.basicPayload);\n                                }\n                            }\n                        }\n                    })\n                    .catch(error => {\n                        console.error('Initialization error:', error);\n                        reject(error);\n                    });\n\n\n            })(CAFE24API.init({\n                client_id: this.cafe24ClientId,\n                version: this.cafe24Version\n            }));\n\n            const attachScrollTracker = () => {\n                /** 간단한 throttle 유틸 – 1초당 한 번만 실행 */\n                function throttle(fn, wait = 1000) {\n                    let last = 0;\n                    return (...args) => {\n                        const now = Date.now();\n                        if (now - last >= wait) {\n                            last = now;\n                            fn(...args);\n                        }\n                    };\n                }\n\n                /** 실제 스크롤 핸들러 */\n                const onScroll = throttle(() => {\n                    const y = window.scrollY || document.documentElement.scrollTop;\n                    (0,_apis_chatConfig__WEBPACK_IMPORTED_MODULE_0__.sendEventLog)(\"Scroll\", this.basicPayload, {\n                        scrollTop: y,\n                        documentHeight: document.documentElement.scrollHeight,\n                        viewportHeight: window.innerHeight,\n                        scrollPercentage: (y / (document.documentElement.scrollHeight - window.innerHeight) * 100).toFixed(1),\n                    });\n                });\n\n                /** passive:true → 스크롤 성능 보호 */\n                window.addEventListener('scroll', onScroll, { passive: true });\n\n                /** SDK가 언마운트될 때 정리(선택) */\n                window.GentooCleanup = () => {\n                    window.removeEventListener('scroll', onScroll);\n                };\n            };\n            attachScrollTracker();\n        });\n        window.__GentooLoggerInited = 'created';\n    }\n\n    async init() {\n        if (window.__GentooLoggerInited !== null && window.__GentooLoggerInited !== undefined) {\n            console.warn(\"GentooIO init called twice, skipping second call.\");\n            return;\n        }\n\n        try {\n            // Wait for boot process to complete\n            await this.bootPromise;\n\n            if (this.isInitialized) {\n                console.warn('GentooLogger is already initialized');\n                return;\n            }\n\n            if (!this.chatUserId) {\n                throw new Error('Required data not yet loaded');\n            }\n\n            this.isInitialized = true;\n\n        } catch (error) {\n            console.error('Failed to initialize:', error);\n            throw error;\n        }\n\n        window.__GentooLoggerInited = 'init';\n    }\n\n    async logEvent(payload) {\n        try {\n            const params = {\n                eventCategory: String(payload.eventCategory),\n                chatUserId: String(payload.chatUserId),\n                partnerId: String(payload.partnerId),\n                channelId: this.isMobileDevice ? \"mobile\" : \"web\",\n                products: payload?.products,\n            };\n\n            const response = await fetch(`${\"https://dev-api.gentooai.com/chat\"}${\"/api/v1/beacon/track\"}/${this.partnerId}`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(params),\n            });\n\n            const res = await response.json(); // JSON 형태의 응답 데이터 파싱\n            return res;\n        } catch (error) {\n            console.error(`Error while calling logEvent API: ${error}`);\n        }\n    }\n\n    async fetchPartnerId(mallId) {\n        try {\n            const url = `${\"https://dev-api.gentooai.com/app\"}${\"/api/partner/v1/cafe24/mall\"}/${mallId}`;\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {}\n            });\n            const res = await response.json();\n            return res.partnerId;\n        } catch (error) {\n            console.error(`Error while calling fetchPartnerId API: ${error}`)\n        }\n    }\n\n    /**\n     * 현재 URL 또는 주어진 URL에서 product_no 값을 추출하는 함수\n     * \n     * @param {string} [urlString=window.location.href] - 분석할 URL 문자열\n     * @returns {string|null} - 추출된 product_no 값 또는 null (찾을 수 없을 경우)\n     */\n    getProductNo(urlString = window.location.href) {\n        const url = new URL(urlString);\n        const path = url.pathname;\n\n        // displayLocation parsing\n        if (\n            path === '/' ||\n            path === '/index.html' ||\n            path.replace(/\\/$/, '') === '' // (빈 path)\n        ) {\n            this.displayLocation = 'HOME';\n        }\n        else if (path.includes('/product') && !path.includes('/product/list') && !path.includes('/search')) {\n            this.displayLocation = 'PRODUCT_DETAIL';\n        }\n        else if (path.includes('/category') || path.includes('/product/list')) {\n            this.displayLocation = 'PRODUCT_LIST';\n        }\n        else if (path.includes('/search')) {\n            this.displayLocation = 'PRODUCT_SEARCH';\n        }\n        else {\n            this.displayLocation = 'UNDEFINED_LOCATION';\n        }\n        try {\n            // URL 객체 생성\n            // const url = new URL(urlString);\n\n            // 1. 쿼리 파라미터에서 product_no 추출 시도\n            const productNoFromQuery = url.searchParams.get('product_no');\n            if (productNoFromQuery) {\n                return productNoFromQuery;\n            }\n\n            // 2. 경로 기반 URL에서 product_no 추출 시도\n            // const path = url.pathname;\n\n            /**\n             * 고려가 필요한 cafe24 경로 패턴\n                /product/{product_name}/{product_no}\n                /product/{product_name}/{product_no}/category/{category_no}/display/{display_group_no}\n                /{shop_no}/product/{product_name}/{product_no}\n             */\n\n            /**\n             * 정규 표현식 설명:\n                (?:\\/[^\\/]+)?\t🔹 optional shop_no segment (/12345 등)\n                \\/product\\/\t/product/ 고정\n                [^\\/]+\tproduct_name\n                \\/([^\\/]+)\t✅ 캡처할 product_no\n                (?:\\/category/...)?\t🔹 optional category/display path\n             */\n            const regex = /^(?:\\/[^\\/]+)?\\/product\\/[^\\/]+\\/([^\\/]+)(?:\\/category\\/[^\\/]+\\/display\\/[^\\/]+\\/?)?$/;\n\n            const match = path.match(regex);\n            if (match && match[1]) {\n                return match[1]; // product_no\n            }\n\n            // 3. 찾을 수 없는 경우 null 반환\n            return null;\n        } catch (error) {\n            console.error('Invalid URL:', error);\n            return null;\n        }\n    }\n\n    getSearchKeyword() {\n        const url = new URL(window.location.href);\n        const searchParams = url.searchParams;\n        return searchParams.get('keyword') || null;\n    }\n}\n\n// Export as a global variable\nwindow.GentooLogger = Logger;\n\n(function (global, document) {\n    var w = global;\n\n    var logger; // Keep logger in closure scope\n\n    // Create a persistent queue processor\n    function createQueueProcessor() {\n        var ge = function () {\n            ge.q.push(Array.from(arguments));\n            processQueue();\n        };\n\n        // Initialize queue\n        ge.q = ge.q || [];\n\n        ge.process = function (args) {\n            var method = args[0];\n            var params = args[1] || {};\n\n            // Handle boot separately\n            if (method === \"boot\") {\n                try {\n                    logger = new Logger(params);\n                } catch (error) {\n                    console.error(\"Failed to create GentooLogger instance:\", error);\n                }\n                return;\n            }\n\n            // For all other methods, ensure instance exists\n            if (!logger) {\n                console.error(\"GentooLogger: Must call boot() before using this method\");\n                return;\n            }\n\n            // Process method\n            switch (method) {\n                case \"init\":\n                    if (typeof logger.init === \"function\") {\n                        Promise.resolve(logger.init(params)).catch((error) => {\n                            console.error(\"Failed to initialize GentooLogger:\", error);\n                        });\n                    }\n                    break;\n                default:\n                    console.error(\"GentooLogger: Unknown method\", method);\n            }\n        };\n\n        return ge;\n    }\n\n    function processQueue() {\n        while (w.GentooLogger.q && w.GentooLogger.q.length) {\n            var args = w.GentooLogger.q.shift();\n            w.GentooLogger.process(args);\n        }\n    }\n\n    // Initialize or get existing GentooLogger\n    var existingGentooLogger = w.GentooLogger;\n    w.GentooLogger = createQueueProcessor();\n\n    // Process any existing queue items\n    if (existingGentooLogger && existingGentooLogger.q) {\n        existingGentooLogger.q.forEach(function (args) {\n            w.GentooLogger.process(args);\n        });\n    }\n})(window, document);\n\n\nGentooLogger('boot', {\n    partnerType: 'cafe24',\n})\n\nGentooLogger('init', {});\n\n//# sourceURL=webpack://gentoo-logger/./src/logger.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/logger.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});