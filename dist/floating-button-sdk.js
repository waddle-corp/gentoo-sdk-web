/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["GentooSDK"] = factory();
	else
		root["GentooSDK"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./floating-button-sdk.js":
/*!********************************!*\
  !*** ./floating-button-sdk.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_config_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/config/env */ \"./src/config/env.js\");\n\n\nconst currentEnv = \"dev\"; // Webpack으로 주입됨\nconst { apiDomain, hostSrc } = _src_config_env__WEBPACK_IMPORTED_MODULE_0__[\"default\"][currentEnv];\n\nclass FloatingButton {\n    constructor(props) {\n        console.log(\"API:\", apiDomain, \"HOST:\", hostSrc);\n        // Validate required props\n        if (window.__GentooInited !== null && window.__GentooInited !== undefined) {\n            console.warn(\"GentooIO constructor called twice, skipping second call.\");\n            return;\n        }\n        if (!props.partnerId || !props.authCode) {\n            throw new Error(\n                \"Missing required parameters: partnerId, authCode are required\"\n            );\n        }\n        this.partnerType = props.partnerType || \"gentoo\";\n        this.partnerId = props.partnerId;\n        this.authCode = props.authCode;\n        this.displayLocation = props.displayLocation || \"HOME\";\n        this.udid = props.udid || \"\";\n        this.utm = props.utm;\n        this.gentooSessionData = JSON.parse(sessionStorage.getItem('gentoo')) || {};\n        this.chatUserId = this.gentooSessionData?.cuid || null;\n        this.chatbotData;\n        this.browserWidth = this.logWindowWidth();\n        this.isSmallResolution = this.browserWidth < 601;\n        this.isMobileDevice = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n        this.hostSrc;\n        this.domains;\n        this.isDestroyed = false;\n        this.isInitialized = false; // Add flag to track initialization\n        this.floatingCount = 0;\n        this.floatingClicked = false;\n        this.warningMessage;\n        this.warningActivated;\n        this.floatingData;\n        this.pageList = [];\n        this.eventCallback = {\n            show: null,\n            click: null,\n            formSubmitted: null,\n        }\n        this.iframeHeightState;\n\n        if (\n            window.location.hostname === \"dailyshot.co\" ||\n            window.location.hostname === \"dev-demo.gentooai.com\" ||\n            window.location.hostname === \"127.0.0.1\"\n        ) {\n            this.hostSrc = \"https://dev-demo.gentooai.com\";\n            this.domains = {\n                auth: \"https://dev-api.gentooai.com/chat/api/v1/user\",\n                log: \"  https://dev-api.gentooai.com/chat/api/v1/event/userEvent\",\n                chatbot: \"https://dev-api.gentooai.com/chat/api/v1/chat/chatbot\",\n                floating: \"https://dev-api.gentooai.com/chat/api/v1/chat/floating\",\n            };\n        } else if (window.location.hostname === \"stage-demo.gentooai.com\") {\n            this.hostSrc = \"https://stage-demo.gentooai.com\";\n            this.domains = {\n                auth: \"https://stage-api.gentooai.com/chat/api/v1/user\",\n                log: \"https://stage-api.gentooai.com/chat/api/v1/event/userEvent\",\n                chatbot: \"https://stage-api.gentooai.com/chat/api/v1/chat/chatbot\",\n                floating: \"https://stage-api.gentooai.com/chat/api/v1/chat/floating\",\n            };\n        } else {\n            this.hostSrc = \"https://demo.gentooai.com\";\n            this.domains = {\n                auth: \"https://api.gentooai.com/chat/api/v1/user\",\n                log: \"https://api.gentooai.com/chat/api/v1/event/userEvent\",\n                chatbot: \"https://api.gentooai.com/chat/api/v1/chat/chatbot\",\n                floating: \"https://api.gentooai.com/chat/api/v1/chat/floating\",\n            };\n        }\n\n        // Add a promise to track initialization status\n        this.bootPromise = Promise.all([\n            this.fetchChatUserId(this.authCode, this.udid).then((res) => {\n                if (!res) throw new Error(\"Failed to fetch chat user ID\");\n                this.chatUserId = res;\n                this.gentooSessionData.cuid = res;\n                sessionStorage.setItem('gentoo', JSON.stringify(this.gentooSessionData));\n            }),\n            this.fetchChatbotData(this.partnerId).then((res) => {\n                if (!res) throw new Error(\"Failed to fetch chatbot data\");\n                this.chatbotData = res;\n                const warningMessageData = this.chatbotData?.experimentalData.find(item => item.key === \"warningMessage\");\n                this.warningMessage = warningMessageData?.extra?.message;\n                this.warningActivated = warningMessageData?.activated;\n            }),\n        ]).catch((error) => {\n            console.error(`Error during initialization: ${error}`);\n            throw error;\n        });\n    }\n\n    async init(params) {\n        if (window.__GentooInited !== null && window.__GentooInited !== undefined) {\n            console.warn(\"GentooIO init called twice, skipping second call.\");\n            return;\n        }\n        window.__GentooInited = 'init';\n        const { position, showGentooButton = true, isCustomButton = false } = params;\n        \n        try {\n            // Wait for boot process to complete\n            await this.bootPromise;\n\n            if (this.isInitialized) {\n                console.warn(\"FloatingButton is already initialized\");\n                return;\n            }\n\n            if (!this.chatUserId || !this.chatbotData) {\n                throw new Error(\"Required data not yet loaded\");\n            }\n\n            this.isInitialized = true;\n\n            // Fetch floating data before creating UI elements\n            this.floatingData = await this.fetchFloatingData(this.partnerId);\n            if (!this.floatingData) {\n                throw new Error(\"Failed to fetch floating data\");\n            }\n\n            if (this.partnerId === '676a4cef7efd43d2d6a93cd7') {\n                this.chatUrl = `${this.hostSrc}/chat/49/${this.chatUserId}?ptid=${this.partnerId}&ch=${this.isMobileDevice}&cuid=${this.chatUserId}&dp=${this.displayLocation}&it=${this.itemId}&utms=${this.utm.utms}&utmm=${this.utm.utmm}&utmca=${this.utm.utmcp}&utmco=${this.utm.utmct}&utmt=${this.utm.utmt}&tp=${this.utm.tp}`;\n            } \n            else if (this.partnerId === '676a4b3cac97386117d1838d') {\n                this.chatUrl = `${this.hostSrc}/chat/153/${this.chatUserId}?ptid=${this.partnerId}&ch=${this.isMobileDevice}&cuid=${this.chatUserId}&dp=${this.displayLocation}&it=${this.itemId}&utms=${this.utm.utms}&utmm=${this.utm.utmm}&utmca=${this.utm.utmcp}&utmco=${this.utm.utmct}&utmt=${this.utm.utmt}&tp=${this.utm.tp}`;\n            } \n            else {\n                this.chatUrl = `${this.hostSrc}/chatroute/${this.partnerType}?ptid=${this.partnerId}&ch=${this.isMobileDevice}&cuid=${this.chatUserId}&dp=${this.displayLocation}&it=${this.itemId}&utms=${this.utm.utms}&utmm=${this.utm.utmm}&utmca=${this.utm.utmcp}&utmco=${this.utm.utmct}&utmt=${this.utm.utmt}&tp=${this.utm.tp}`;\n            }\n\n            // Create UI elements after data is ready\n            if (!this.isDestroyed) this.createUIElements(position, showGentooButton, isCustomButton);\n            else this.destroy();\n\n        } catch (error) {\n            console.error(\"Failed to initialize:\", error);\n            throw error;\n        }\n    }\n\n    // Separate UI creation into its own method for clarity\n    createUIElements(position, showGentooButton, isCustomButton = false) {\n        window.__GentooInited = 'creating';\n        this.customButton = isCustomButton ? document.getElementsByClassName(\"gentoo-custom-button\")[0] : null;\n        // Add null checks before accessing properties\n        if (\n            !this.chatbotData ||\n            !this.chatbotData.position ||\n            !this.chatbotData.mobilePosition\n        ) {\n            console.error(\"Chatbot data is incomplete\");\n            return;\n        }\n\n        if (!this.floatingData || !this.floatingData.imageUrl) {\n            console.error(\"Floating data is incomplete\");\n            return;\n        }\n\n        if (this.eventCallback.show !== null) {\n            this.eventCallback.show();\n        }\n\n        // Create iframe elements\n        this.dimmedBackground = document.createElement(\"div\");\n        this.dimmedBackground.className = \"dimmed-background hide\";\n        this.iframeContainer = document.createElement(\"div\");\n        this.iframeContainer.className = \"iframe-container iframe-container-hide\";\n        this.chatHeader = document.createElement(\"div\");\n        this.chatHandler = document.createElement(\"div\");\n        this.chatHeaderText = document.createElement(\"p\");\n        this.closeButtonContainer = document.createElement(\"div\");\n        this.closeButtonIcon = document.createElement(\"div\");\n        this.closeButtonText = document.createElement(\"p\");\n        this.chatHeaderText.innerText = \"Gentoo\";\n        this.footer = document.createElement(\"div\");\n        this.footer.className = \"chat-footer\";\n        this.footerText = document.createElement(\"p\");\n        this.footerText.className = \"chat-footer-text\";\n        this.footer.appendChild(this.footerText);\n        this.iframe = document.createElement(\"iframe\");\n        this.iframe.src = this.chatUrl;\n\n        if (this.isSmallResolution) {\n            this.chatHeader.className = \"chat-header-md\";\n            this.chatHandler.className = \"chat-handler-md\";\n            this.chatHeaderText.className = \"chat-header-text-md\";\n            this.closeButtonContainer.className = \"chat-close-button-container-md\";\n            this.closeButtonIcon.className = \"chat-close-button-icon-md\";\n            this.closeButtonText.className = \"chat-close-button-text-md\";\n            this.closeButtonText.innerText = \"접기\";\n            this.closeActionArea = document.createElement(\"div\");\n            this.closeActionArea.className = \"chat-close-action-area-md\";\n            this.iframe.className = `chat-iframe-md ${this.warningActivated ? 'footer-add-height-md' : ''}`;\n            this.closeButtonContainer.appendChild(this.closeButtonIcon);\n            this.closeButtonContainer.appendChild(this.closeButtonText);\n            this.chatHeader.appendChild(this.chatHeaderText);\n            this.chatHeader.appendChild(this.chatHandler);\n            this.chatHeader.appendChild(this.closeButtonContainer);\n            this.iframeContainer.appendChild(this.closeActionArea);\n        } else {\n            this.chatHeader.className = \"chat-header\";\n            this.chatHeaderText.className = \"chat-header-text\";\n            this.closeButtonContainer.className = \"chat-close-button-container\";\n            this.closeButtonIcon.className = \"chat-close-button-icon\";\n            this.closeButtonText.className = \"chat-close-button-text\";\n            this.closeButtonText.innerText = \"채팅창 축소\";\n            this.iframe.className = `chat-iframe ${this.warningActivated ? 'footer-add-height' : ''}`;\n            this.closeButtonContainer.appendChild(this.closeButtonIcon);\n            this.closeButtonContainer.appendChild(this.closeButtonText);\n            this.chatHeader.appendChild(this.chatHeaderText);\n            this.chatHeader.appendChild(this.closeButtonContainer);\n        }\n\n        this.iframeContainer.appendChild(this.chatHeader);\n        this.iframeContainer.appendChild(this.iframe);\n        if (this.warningActivated) {\n            this.footerText.innerText = this.warningMessage;\n            this.iframeContainer.appendChild(this.footer);\n        }\n        document.body.appendChild(this.dimmedBackground);\n        document.body.appendChild(this.iframeContainer);\n        \n        this.logEvent({\n            eventCategory: \"SDKFloatingRendered\",\n            partnerId: this.partnerId,\n            chatUserId: this.chatUserId,\n            products: [],\n        });\n\n        // Create floating button\n        if (showGentooButton) {\n            this.floatingContainer = document.createElement(\"div\");\n            this.floatingContainer.className = `floating-container`;\n            this.updateFloatingContainerPosition(position); // Set initial position\n            this.button = document.createElement(\"div\");\n            if (this.isSmallResolution) {\n                this.button.className = `floating-button-common button-image-md`;\n            } else {\n                this.button.className = `floating-button-common button-image`;\n            }\n            this.button.type = \"button\";\n            this.button.style.backgroundImage = `url(${this.floatingData.imageUrl})`;\n            document.body.appendChild(this.floatingContainer);\n            this.floatingContainer.appendChild(this.button);\n\n            if (!this.gentooSessionData?.redirectState && this.floatingCount < 2 && this.floatingData.comment.length > 0) {\n                setTimeout(() => {\n                    // Check if component is destroyed or clicked\n                    if (this.floatingClicked || this.isDestroyed || !this.floatingContainer)\n                        return;\n\n                    this.expandedButton = document.createElement(\"div\");\n                    this.expandedText = document.createElement(\"p\");\n                    if (this.isSmallResolution) {\n                        this.expandedButton.className = \"expanded-area-md\";\n                        this.expandedText.className = \"expanded-area-text-md\";\n                    } else {\n                        this.expandedButton.className = \"expanded-area\";\n                        this.expandedText.className = \"expanded-area-text\";\n                    }\n                    this.expandedButton.appendChild(this.expandedText);\n\n                    // Double check if floatingContainer still exists before appending\n                    if (this.floatingContainer && this.floatingContainer.parentNode) {\n                        this.floatingContainer.appendChild(this.expandedButton);\n\n                        // Add text animation\n                        let i = 0;\n                        const addLetter = () => {\n                            if (!this.floatingData) return;\n                            if (i < this.floatingData.comment.length && !this.isDestroyed) {\n                                this.expandedText.innerText += this.floatingData.comment[i];\n                                i++;\n                                setTimeout(addLetter, 1000 / this.floatingData.comment.length);\n                            }\n                        };\n                        addLetter();\n                        this.floatingCount += 1;\n\n                        // Remove expanded button after delay\n                        setTimeout(() => {\n                            if (\n                                this.floatingContainer &&\n                                this.expandedButton &&\n                                this.expandedButton.parentNode === this.floatingContainer\n                            ) {\n                                this.floatingContainer.removeChild(this.expandedButton);\n                            }\n                        }, 5000);\n                        setTimeout(() => {\n                            this.button.classList.add('jumper');\n                        }, 7000);\n                        // add jumper class\n                    }\n                }, 2000);\n            }\n        }\n\n        this.elems = {\n            iframeContainer: this.iframeContainer,\n            iframe: this.iframe,\n            chatHeader: this.chatHeader,\n            dimmedBackground: this.dimmedBackground,\n            button: this.button,\n            expandedButton: this.expandedButton,\n            customButton: this.customButton,\n        };\n\n        // Add event listeners\n        this.setupEventListeners(position, isCustomButton);\n        if (this.gentooSessionData?.redirectState) {\n            setTimeout(() => {\n                if (this.expandedButton)\n                    this.expandedButton.className = \"expanded-area hide\";\n                if (this.button) {\n                    this.button.className =\n                        \"floating-button-common button-image-close-mr hide\";\n                }\n            }, 100);\n            setTimeout(() => {\n                this.openChat();\n                this.gentooSessionData.redirectState = false;\n                sessionStorage.setItem('gentoo', JSON.stringify(this.gentooSessionData));\n            }, 500);\n        }\n        window.__GentooInited = 'created';\n    }\n\n    setupEventListeners(position) {\n        // Button click event\n        var buttonClickHandler = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.floatingClicked = true;\n            \n            if (this.iframeContainer.classList.contains(\"iframe-container-hide\")) {\n                if (this.expandedButton)\n                    this.expandedButton.className = \"expanded-area hide\";\n                if (this.button) {\n                    if (this.isSmallResolution) {\n                        this.button.className =\n                            \"floating-button-common button-image-close-mr hide\";\n                    } else {\n                        this.button.className =\n                            \"floating-button-common button-image-close hide\";\n                    }\n                }\n                this.openChat(e, this.elems);\n                if (this.eventCallback.click !== null) {\n                    this.eventCallback.click();\n                }\n            } else {\n                this.hideChat(\n                    this.elems.iframeContainer,\n                    this.elems.button,\n                    this.elems.expandedButton,\n                    this.elems.dimmedBackground\n                );\n                if (this.button) {\n                    if (this.isSmallResolution) {\n                        this.button.className = \"floating-button-common button-image-md\";\n                    } else {\n                        this.button.className = \"floating-button-common button-image\";\n                    }\n                    this.button.style.backgroundImage = `url(${this.floatingData.imageUrl})`;\n                }\n            }\n        };\n\n        var sendPostMessageHandler = (e, clickedElement, currentPage = window?.location?.pathname) => {\n            e.stopPropagation();\n            e.preventDefault();\n            const buttonClickState = {\n                buttonClickState: true,\n                clickedElement: clickedElement,\n                currentPage: currentPage,\n            }\n            this.iframe.contentWindow.postMessage(buttonClickState, \"*\");\n        }\n\n        window?.addEventListener(\"message\", (e) => {\n            if (e.data.redirectState) {\n                this.gentooSessionData.redirectState = true;\n                sessionStorage.setItem('gentoo', JSON.stringify(this.gentooSessionData));\n                sendPostMessageHandler(e, 'carouselRedirect', e.data.redirectUrl);\n                window.location.href = e.data.redirectUrl;\n            }\n            if (e.data.formSubmittedState) {\n                const params = { p1: e.data.firstAnswer, p2: e.data.secondAnswer };\n                if (this.eventCallback.formSubmitted !== null) {\n                    this.eventCallback?.formSubmitted(params);\n                }\n            }\n            if (this.isSmallResolution && e.data.inputFocusState) {\n                this.enableChat(\"full\");\n            }\n            if (e.data.resetState) {\n                if (this.isMobileDevice && this.iframeContainer) {\n                    this.iframeContainer.style.height = \"449px\";\n                }\n            }\n            if (e.data.closeRequestState) {\n                this.hideChat();\n            }\n            if (this.isMobileDevice) {\n                if (e.data.messageExistence === 'exist') {\n                    this.iframeHeightState = 'full';\n                } else if (e.data.messageExistence === 'none') {\n                    this.iframeHeightState = 'shrink';\n                }\n            }\n        });\n\n        this.floatingContainer?.addEventListener(\"click\", buttonClickHandler);\n        this.floatingContainer?.addEventListener(\"click\", (e) => sendPostMessageHandler(e, 'floatingContainer'));\n        this.closeButtonContainer?.addEventListener(\"click\", buttonClickHandler);\n        this.closeButtonContainer?.addEventListener(\"click\", (e) => sendPostMessageHandler(e, 'closeButtonContainer'));\n        this.closeButtonIcon?.addEventListener(\"click\", buttonClickHandler);\n        this.closeActionArea?.addEventListener(\"click\", buttonClickHandler);\n        this.closeActionArea?.addEventListener(\"click\", (e) => sendPostMessageHandler(e, 'closeActionArea'));\n        this.customButton?.addEventListener(\"click\", buttonClickHandler);\n\n        // Add event listener for the resize event\n        window?.addEventListener(\"resize\", () => {\n            this.browserWidth = this.logWindowWidth();\n            this.isSmallResolution = this.browserWidth < 601;\n            this.updateFloatingContainerPosition(position); // Update position on resize\n        });\n\n        window?.addEventListener('popstate', () => {\n            if (this.isMobileDevice) {\n                this.hideChat();\n            }\n        });\n    }\n\n    updateFloatingContainerPosition(position) {\n        if (this.floatingContainer) {\n            this.floatingContainer.style.bottom = `${this.isSmallResolution\n                ? (position?.mobile?.bottom || this.chatbotData.mobilePosition.bottom)\n                : (position?.web?.bottom || this.chatbotData.position.bottom)\n                }px`;\n            this.floatingContainer.style.right = `${this.isSmallResolution\n                ? (position?.mobile?.right || this.chatbotData.mobilePosition.right)\n                : (position?.web?.right || this.chatbotData.position.right)\n                }px`;\n        }\n    }\n\n    openChat() {\n        // Chat being visible\n        this.enableChat(this.iframeHeightState || 'full');\n        if (this.isMobileDevice) {history.pushState({ chatOpen: true }, '', window.location.href);}\n\n        this.dimmedBackground?.addEventListener(\"click\", (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.dimmedBackground.className = \"dimmed-background hide\";\n            this.hideChat();\n            if (this.button) this.button.style.backgroundImage = `url(${this.floatingData.imageUrl})`;\n        });\n\n        this.chatHeader?.addEventListener(\"touchmove\", (e) => {\n            this.handleTouchMove(e, this.iframeContainer);\n        });\n\n        this.chatHeader?.addEventListener(\"touchend\", (e) => {\n            this.handleTouchEnd(\n                e,\n                this.iframeContainer,\n                this.button,\n                this.expandedButton,\n                this.dimmedBackground\n            );\n        });\n\n        this.chatHeader?.addEventListener(\"mousedown\", (e) => {\n            e.preventDefault();\n            this.handleMouseDown(e, this.iframe);\n            const onMouseMove = (e) => {\n                e.preventDefault();\n                this.handleMouseMove(e, this.iframeContainer);\n            };\n            const onMouseUp = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                this.handleMouseUp(\n                    e,\n                    this.iframeContainer,\n                    this.iframe,\n                    this.button,\n                    this.expandedButton,\n                    this.dimmedBackground,\n                );\n                document.removeEventListener(\"mousemove\", onMouseMove);\n                window.removeEventListener(\"mouseup\", onMouseUp);\n            };\n            document.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n        });\n    }\n\n    remove() {\n        if (this.button) {\n            document.body.removeChild(this.button);\n        }\n        if (this.expandedButton) {\n            document.body.removeChild(this.expandedButton);\n        }\n        if (this.iframeContainer) {\n            document.body.removeChild(this.iframeContainer);\n        }\n        this.button = null;\n        this.expandedButton = null;\n        this.iframeContainer = null;\n    }\n\n    destroy() {\n        if (window.__GentooInited !== 'created') {\n            console.log('FloatingButton instance is not created');\n            return;\n        }\n        this.isDestroyed = true;\n\n        console.log(\"Destroying FloatingButton instance\");\n\n        // Remove event listeners\n        window.removeEventListener(\"resize\", this.handleResize);\n        if (this.button) {\n            this.button.removeEventListener(\"click\", this.buttonClickHandler);\n        }\n        if (this.expandedButton) {\n            this.expandedButton.removeEventListener(\n                \"click\",\n                this.expandedButtonClickHandler\n            );\n        }\n\n        // Remove all DOM elements\n        if (this.floatingContainer && this.floatingContainer.parentNode) {\n            this.floatingContainer.parentNode.removeChild(this.floatingContainer);\n        }\n        if (this.iframeContainer && this.iframeContainer.parentNode) {\n            this.iframeContainer.parentNode.removeChild(this.iframeContainer);\n        }\n        if (this.dimmedBackground && this.dimmedBackground.parentNode) {\n            this.dimmedBackground.parentNode.removeChild(this.dimmedBackground);\n        }\n\n        // Reset all properties\n        this.button = null;\n        this.expandedButton = null;\n        this.expandedText = null;\n        this.iframeContainer = null;\n        this.floatingContainer = null;\n        this.dimmedBackground = null;\n        this.chatHeader = null;\n        this.iframe = null;\n        this.chatHandler = null;\n        this.closeButtonContainer = null;\n        this.closeButtonIcon = null;\n        this.closeButtonText = null;\n        this.chatUserId = null;\n        this.floatingData = null;\n        this.chatbotData = null;\n        this.chatUrl = null;\n\n        // Reset state flags\n        this.isInitialized = false;\n        this.floatingCount = 0;\n        this.floatingClicked = false;\n\n        window.__GentooInited = null;\n    }\n\n    setPageList(pageList) {\n        this.pageList = pageList;\n    }\n\n    async logEvent(payload) {\n        try {\n            const params = {\n                eventCategory: String(payload.eventCategory),\n                chatUserId: String(payload.chatUserId),\n                partnerId: String(payload.partnerId),\n                channelId: this.isMobileDevice ? \"mobile\" : \"web\",\n                products: payload?.products,\n            };\n\n            const response = await fetch(`${this.domains.log}/${this.partnerId}`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(params),\n            });\n\n            const res = await response.json(); // JSON 형태의 응답 데이터 파싱\n            return res;\n        } catch (error) {\n            console.error(`Error while calling logEvent API: ${error}`);\n        }\n    }\n\n    async fetchChatUserId(userToken, udid = \"\") {\n        const convertedUserToken = (userToken && userToken !== 'null') ? String(userToken) : Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        const params = {\n            externalKey: String(this.partnerId),\n            userToken: convertedUserToken,\n            udid: String(udid),\n            chatUserId: this.chatUserId ? String(this.chatUserId) : null\n        }\n\n        try {\n            const url = `${this.domains.auth}`;\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(params)\n            });\n\n            const res = await response.json();\n            return res.chatUserId;\n        } catch (error) {\n            console.error(`Error while calling fetchChatUserId API: ${error}`)\n        }\n    }\n\n    async fetchChatbotData(partnerId) {\n        try {\n            const response = await fetch(`${this.domains.chatbot}/${partnerId}`, {\n                method: \"GET\",\n                headers: {},\n            });\n            const res = await response.json();\n            return res;\n        } catch (error) {\n            console.error(`Error while calling fetchChatbotId API: ${error}`);\n        }\n    }\n\n    async fetchFloatingData(partnerId) {\n        try {\n            const response = await fetch(\n                `${this.domains.floating}/${partnerId}?displayLocation=${this.displayLocation}&itemId=${this.itemId}`,\n                {\n                    method: \"GET\",\n                    headers: {},\n                }\n            );\n\n            const res = await response.json();\n            return res;\n        } catch (error) {\n            console.error(`Error while calling fetchFloatingData API: ${error}`);\n        }\n    }\n\n    handleTouchMove(e, iframeContainer) {\n        e.preventDefault();\n        const touch = e.touches[0];\n        if (!this.prevPosition) {\n            this.prevPosition = touch.clientY;\n        }\n\n        const diff = touch.clientY - this.prevPosition;\n        this.scrollPosition += diff;\n        this.prevPosition = touch.clientY;\n\n        const newHeight = iframeContainer.offsetHeight - diff;\n        iframeContainer.style.height = `${newHeight}px`;\n        if (Math.abs(diff) > 1) {\n            this.scrollDir = diff > 0 ? \"down\" : \"up\";\n        }\n    }\n\n    handleTouchEnd(e) {\n        e.preventDefault();\n        if (this.scrollDir === \"up\") {\n            this.enableChat(\"full\");\n        } else if (this.scrollDir === \"down\") {\n            this.hideChat();\n        }\n\n        this.prevPosition = null;\n        this.scrollPosition = 0;\n        this.scrollDir = \"\";\n    }\n\n    handleMouseDown(e, iframe) {\n        e.preventDefault();\n        iframe.classList.add(\"event-disabled\");\n        const clientY = e.clientY; // Use clientY from mouse event\n        if (!this.prevPosition) {\n            this.prevPosition = clientY;\n        }\n    }\n\n    handleMouseMove(e, iframeContainer) {\n        e.preventDefault();\n        const clientY = e.clientY; // Use clientY from mouse event\n\n        const diff = clientY - this.prevPosition;\n\n        const newHeight = iframeContainer.offsetHeight - diff;\n        iframeContainer.style.height = `${newHeight}px`;\n        if (Math.abs(diff) > 30) {\n            this.scrollDir = diff > 0 ? \"down\" : \"up\";\n        }\n    }\n\n    handleMouseUp(e, iframeContainer, iframe) {\n        e.preventDefault();\n        iframe.classList.remove(\"event-disabled\");\n        if (this.scrollDir === \"up\") {\n            iframeContainer.style.height = \"99%\";\n            this.enableChat(\"shrink\");\n        } else if (this.scrollDir === \"down\") {\n            this.hideChat();\n        }\n\n        this.prevPosition = null;\n        this.scrollPosition = 0;\n        this.scrollDir = \"\";\n    }\n\n    enableChat(mode) {\n        this.logEvent({\n            eventCategory: \"SDKFloatingClicked\",\n            partnerId: this.partnerId,\n            chatUserId: this.chatUserId,\n            products: [],\n        });\n\n        if (this.isSmallResolution) {\n            this.dimmedBackground.className = \"dimmed-background\";\n            if (this.button) this.button.className = \"floating-button-common hide\";\n            if (this.expandedButton) this.expandedButton.className = \"expanded-button hide\";\n        }\n        if (mode === \"shrink\") {\n            this.iframeContainer.className = \"iframe-container-shrink\";\n            if (this.isMobileDevice) this.iframeContainer.style.height = \"449px\";\n        } else if (mode === \"full\") {\n            this.iframeContainer.className = \"iframe-container\";\n            if (this.isMobileDevice) this.iframeContainer.style.height = \"99%\";\n        } else {\n            return;\n        }\n    }\n\n    hideChat() {\n        if (this.button) {\n            if (this.isSmallResolution) {\n                this.button.className = \"floating-button-common button-image-md\";\n            } else {\n                this.button.className = \"floating-button-common button-image\";\n            }\n        }\n        if (this.expandedButton) this.expandedButton.className = \"expanded-button hide\";\n        this.iframeContainer.className = \"iframe-container iframe-container-hide\";\n        this.dimmedBackground.className = \"dimmed-background hide\";\n    }\n\n    // Function to log the current window width\n    logWindowWidth() {\n        const width = window.innerWidth;\n        return width;\n    }\n\n    async sendLog(input) {\n        try {\n            await this.bootPromise;\n            // Wait for fetchChatUserId to complete before proceeding\n            this.chatUserId = await this.fetchChatUserId(input.authCode);\n\n            const payload = {\n                eventCategory: input.eventCategory,\n                partnerId: String(input.partnerId),\n                chatUserId: String(this.chatUserId),\n                products: input.products,\n            };\n\n            return this.logEvent(payload);\n        } catch (error) {\n            console.error(\"Failed to send log:\", error);\n            throw error;\n        }\n    }\n\n    getGentooShowEvent(callback) {\n        // Execute the callback function\n        if (typeof callback === \"function\" && this.eventCallback) {\n            this.eventCallback.show = callback;\n        }\n    }\n\n    getGentooClickEvent(callback) {\n        // Execute the callback function\n        if (typeof callback === \"function\" && this.eventCallback) {\n            this.eventCallback.click = callback;\n        }\n    }\n\n    getFormSubmittedEvent(callback) {\n        // Execute the callback function\n        if (typeof callback === \"function\" && this.eventCallback) {\n            this.eventCallback.formSubmitted = callback;\n        }\n    }\n}\n\n// Export as a global variable\nwindow.FloatingButton = FloatingButton;\n\n(function (global, document) {\n    var w = global;\n\n    // Function to inject CSS\n    function injectCSS(href) {\n        var existingLink = document.querySelector('link[href=\"' + href + '\"]');\n        if (existingLink) return;\n\n        var link = document.createElement(\"link\");\n        link.rel = \"stylesheet\";\n        link.href = href;\n        link.type = \"text/css\";\n        link.onerror = function () {\n            console.error(\"Failed to load GentooIO CSS.\");\n        };\n        document.head.appendChild(link);\n    }\n\n    // Inject the CSS automatically\n    // injectCSS(\"https://sdk.gentooai.com/floating-button-sdk.css\");\n    injectCSS(\"https://dev-sdk.gentooai.com/floating-button-sdk.css\");\n    // injectCSS(\"./floating-button-sdk.css\");\n    var fb; // Keep fb in closure scope\n\n    // Create a persistent queue processor\n    function createQueueProcessor() {\n        var ge = function () {\n            ge.q.push(Array.from(arguments));\n            processQueue();\n        };\n\n        // Initialize queue\n        ge.q = ge.q || [];\n\n        ge.process = function (args) {\n            var method = args[0];\n            var params = args[1] || {};\n\n            // Add UTM parameters\n            const parsedUrl = new URL(window.location.href);\n            const pathSegments = parsedUrl.pathname.split(\"/\");\n            const transitionPage = \"/\" + pathSegments[1];\n            const searchParams = new URLSearchParams(window.location.search);\n            const utm = {\n                utms: searchParams.get(\"utm_source\"),\n                utmm: searchParams.get(\"utm_medium\"),\n                utmcp: searchParams.get(\"utm_campaign\"),\n                utmct: searchParams.get(\"utm_content\"),\n                utmt: searchParams.get(\"utm_term\"),\n                tp: transitionPage,\n            };\n\n            // Handle boot separately\n            if (method === \"boot\") {\n                params.utm = utm;\n                try {\n                    fb = new FloatingButton(params);\n                } catch (error) {\n                    console.error(\"Failed to create FloatingButton instance:\", error);\n                }\n                return;\n            }\n\n            // For all other methods, ensure instance exists\n            if (!fb) {\n                console.error(\"GentooIO: Must call boot() before using this method\");\n                return;\n            }\n\n            // Process method\n            switch (method) {\n                case \"init\":\n                    if (typeof fb.init === \"function\") {\n                        Promise.resolve(fb.init(params)).catch((error) => {\n                            console.error(\"Failed to initialize GentooIO:\", error);\n                        });\n                    }\n                    break;\n                case \"openChat\":\n                    if (typeof fb.openChat === \"function\") {\n                        Promise.resolve(fb.openChat()).catch((error) => {\n                            console.error(\"Failed to open GentooIO chat:\", error);\n                        });\n                    }\n                    break;\n                case \"unmount\":\n                    if (typeof fb.destroy === \"function\") {\n                        Promise.resolve(fb.destroy()).catch((error) => {\n                            console.error(\"Failed to unmount GentooIO:\", error);\n                        });\n                    }\n                    break;\n                case \"sendLog\":\n                    if (typeof fb.sendLog === \"function\") {\n                        Promise.resolve(fb.sendLog(params)).catch((error) => {\n                            console.error(\"Failed to send GentooIO log:\", error);\n                        });\n                    }\n                    break;\n                case \"setPageList\":\n                    if (typeof fb.setPageList === \"function\") {\n                        Promise.resolve(fb.setPageList(params)).catch((error) => {\n                            console.error(\"Failed to set GentooIO page list:\", error);\n                        });\n                    }\n                    break;\n                case \"getGentooShowEvent\":\n                    if (typeof fb.getGentooShowEvent === \"function\") {\n                        Promise.resolve(fb.getGentooShowEvent(params.callback)).catch((error) => {\n                            console.error(\"Failed to get GentooIO event:\", error);\n                        });\n                    }\n                    break;\n                case \"getGentooClickEvent\":\n                    if (typeof fb.getGentooClickEvent === \"function\") {\n                        Promise.resolve(fb.getGentooClickEvent(params.callback)).catch((error) => {\n                            console.error(\"Failed to get GentooIO event:\", error);\n                        });\n                    }\n                    break;\n                case \"getFormSubmittedEvent\":\n                    if (typeof fb.getFormSubmittedEvent === \"function\") {\n                        Promise.resolve(fb.getFormSubmittedEvent(params.callback)).catch((error) => {\n                            console.error(\"Failed to get GentooIO event:\", error);\n                        });\n                    }\n                    break;\n                default:\n                    console.error(\"GentooIO: Unknown method\", method);\n            }\n        };\n\n        return ge;\n    }\n\n    function processQueue() {\n        while (w.GentooIO.q && w.GentooIO.q.length) {\n            var args = w.GentooIO.q.shift();\n            w.GentooIO.process(args);\n        }\n    }\n\n    // Initialize or get existing GentooIO\n    var existingGentooIO = w.GentooIO;\n    w.GentooIO = createQueueProcessor();\n\n    // Process any existing queue items\n    if (existingGentooIO && existingGentooIO.q) {\n        existingGentooIO.q.forEach(function (args) {\n            w.GentooIO.process(args);\n        });\n    }\n})(window, document);\n\n\n//# sourceURL=webpack://GentooSDK/./floating-button-sdk.js?");

/***/ }),

/***/ "./src/config/env.js":
/*!***************************!*\
  !*** ./src/config/env.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst ENV_CONFIG = {\n    dev: {\n      apiDomain: {\n        auth: 'https://dev-api.gentooai.com/chat/api/v1/user',\n        log: 'https://dev-api.gentooai.com/chat/api/v1/event/userEvent',\n        chatbot: 'https://dev-api.gentooai.com/chat/api/v1/chat/chatbot',\n        floating: 'https://dev-api.gentooai.com/chat/api/v1/chat/floating',\n        partnerId: 'https://dev-api.gentooai.com/app/api/partner/v1/cafe24/mall',\n      },\n      hostSrc: \"https://dev-demo.gentooai.com\",\n    },\n    stage: {\n      apiDomain: {\n        auth: \"https://stage-api.gentooai.com/chat/api/v1/user\",\n        log: \"https://stage-api.gentooai.com/chat/api/v1/event/userEvent\",\n        chatbot: \"https://stage-api.gentooai.com/chat/api/v1/chat/chatbot\",\n        floating: \"https://stage-api.gentooai.com/chat/api/v1/chat/floating\",\n        partnerId: \"https://stage-api.gentooai.com/app/api/partner/v1/cafe24/mall\",\n      },\n      hostSrc: \"https://stage-demo.gentooai.com\",\n    },\n    prod: {\n      apiDomain: {\n        auth: 'https://api.gentooai.com/chat/api/v1/user',\n        log: 'https://api.gentooai.com/chat/api/v1/event/userEvent',\n        chatbot: 'https://api.gentooai.com/chat/api/v1/chat/chatbot',\n        floating: 'https://api.gentooai.com/chat/api/v1/chat/floating',\n        partnerId: 'https://api.gentooai.com/app/api/partner/v1/cafe24/mall',\n      },\n      hostSrc: \"https://demo.gentooai.com\",\n    },\n  };\n  \n  /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ENV_CONFIG);\n\n//# sourceURL=webpack://GentooSDK/./src/config/env.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./floating-button-sdk.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});